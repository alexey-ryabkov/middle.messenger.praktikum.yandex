@mixin text-ellipsis {
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}
@mixin gen-props($selector, $props, $variants, $child:'') {
    @each $name, $value in $variants {
        #{$selector}#{$name} #{$child} { 
			@each $prop in $props {
				#{$prop}: $value;
			}
        }
    }
}
@mixin gen-sizes($selector, $prop, $sizes, $child:'') {
    @each $name, $value in $sizes {
        #{$selector}#{$name} #{$child} { 
            #{$prop}: $value;
        }
    }
}
@mixin text-truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}/*
@mixin bg-glass {
    background: rgba(245, 245, 245, 0.25);
    background-blend-mode: luminosity;
    backdrop-filter: blur(40.7742px);
}
@mixin bg-dropshadow {
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);    
}*/
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}
